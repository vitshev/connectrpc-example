// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=none"
// @generated from file bookstore.proto (package bookstore, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct } from "@bufbuild/protobuf";
import { HttpBody } from "./google/api/httpbody_pb";

/**
 * A shelf resource.
 *
 * @generated from message bookstore.Shelf
 */
export class Shelf extends Message<Shelf> {
  /**
   * A unique shelf id.
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * A theme of the shelf (fiction, poetry, etc).
   *
   * @generated from field: string theme = 2;
   */
  theme = "";

  /**
   * To test json name is percentage decoded
   *
   * @generated from field: string search_decoded = 3 [json_name = "search[decoded]"];
   */
  searchDecoded = "";

  /**
   * To test json name is percentage encoded
   *
   * @generated from field: string search_encoded = 4 [json_name = "search%5Bencoded%5D"];
   */
  searchEncoded = "";

  constructor(data?: PartialMessage<Shelf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.Shelf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "theme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "search_decoded", jsonName: "search[decoded]", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "search_encoded", jsonName: "search%5Bencoded%5D", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Shelf {
    return new Shelf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Shelf {
    return new Shelf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Shelf {
    return new Shelf().fromJsonString(jsonString, options);
  }

  static equals(a: Shelf | PlainMessage<Shelf> | undefined, b: Shelf | PlainMessage<Shelf> | undefined): boolean {
    return proto3.util.equals(Shelf, a, b);
  }
}

/**
 * A book resource.
 *
 * @generated from message bookstore.Book
 */
export class Book extends Message<Book> {
  /**
   * A unique book id.
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * An author of the book.
   *
   * @generated from field: string author = 2;
   */
  author = "";

  /**
   * A book title.
   *
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * Quotes from the book.
   *
   * @generated from field: repeated string quotes = 4;
   */
  quotes: string[] = [];

  constructor(data?: PartialMessage<Book>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.Book";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quotes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Book {
    return new Book().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Book {
    return new Book().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Book {
    return new Book().fromJsonString(jsonString, options);
  }

  static equals(a: Book | PlainMessage<Book> | undefined, b: Book | PlainMessage<Book> | undefined): boolean {
    return proto3.util.equals(Book, a, b);
  }
}

/**
 * An author resource.
 *
 * @generated from message bookstore.Author
 */
export class Author extends Message<Author> {
  /**
   * A unique author id.
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bookstore.Author.Gender gender = 2;
   */
  gender = Author_Gender.UNKNOWN;

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4 [json_name = "lname"];
   */
  lastName = "";

  constructor(data?: PartialMessage<Author>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.Author";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "gender", kind: "enum", T: proto3.getEnumType(Author_Gender) },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", jsonName: "lname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Author {
    return new Author().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Author {
    return new Author().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Author {
    return new Author().fromJsonString(jsonString, options);
  }

  static equals(a: Author | PlainMessage<Author> | undefined, b: Author | PlainMessage<Author> | undefined): boolean {
    return proto3.util.equals(Author, a, b);
  }
}

/**
 * @generated from enum bookstore.Author.Gender
 */
export enum Author_Gender {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: MALE = 1;
   */
  MALE = 1,

  /**
   * @generated from enum value: FEMALE = 2;
   */
  FEMALE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Author_Gender)
proto3.util.setEnumType(Author_Gender, "bookstore.Author.Gender", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "MALE" },
  { no: 2, name: "FEMALE" },
]);

/**
 * Response to ListShelves call.
 *
 * @generated from message bookstore.ListShelvesResponse
 */
export class ListShelvesResponse extends Message<ListShelvesResponse> {
  /**
   * Shelves in the bookstore.
   *
   * @generated from field: repeated bookstore.Shelf shelves = 1;
   */
  shelves: Shelf[] = [];

  constructor(data?: PartialMessage<ListShelvesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.ListShelvesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelves", kind: "message", T: Shelf, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListShelvesResponse {
    return new ListShelvesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListShelvesResponse {
    return new ListShelvesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListShelvesResponse {
    return new ListShelvesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListShelvesResponse | PlainMessage<ListShelvesResponse> | undefined, b: ListShelvesResponse | PlainMessage<ListShelvesResponse> | undefined): boolean {
    return proto3.util.equals(ListShelvesResponse, a, b);
  }
}

/**
 * Request message for CreateShelf method.
 *
 * @generated from message bookstore.CreateShelfRequest
 */
export class CreateShelfRequest extends Message<CreateShelfRequest> {
  /**
   * The shelf resource to create.
   *
   * @generated from field: bookstore.Shelf shelf = 1;
   */
  shelf?: Shelf;

  constructor(data?: PartialMessage<CreateShelfRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.CreateShelfRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelf", kind: "message", T: Shelf },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateShelfRequest {
    return new CreateShelfRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateShelfRequest {
    return new CreateShelfRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateShelfRequest {
    return new CreateShelfRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateShelfRequest | PlainMessage<CreateShelfRequest> | undefined, b: CreateShelfRequest | PlainMessage<CreateShelfRequest> | undefined): boolean {
    return proto3.util.equals(CreateShelfRequest, a, b);
  }
}

/**
 * Request message for GetShelf method.
 *
 * @generated from message bookstore.GetShelfRequest
 */
export class GetShelfRequest extends Message<GetShelfRequest> {
  /**
   * The ID of the shelf resource to retrieve.
   *
   * @generated from field: int64 shelf = 1;
   */
  shelf = protoInt64.zero;

  constructor(data?: PartialMessage<GetShelfRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.GetShelfRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelf", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetShelfRequest {
    return new GetShelfRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetShelfRequest {
    return new GetShelfRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetShelfRequest {
    return new GetShelfRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetShelfRequest | PlainMessage<GetShelfRequest> | undefined, b: GetShelfRequest | PlainMessage<GetShelfRequest> | undefined): boolean {
    return proto3.util.equals(GetShelfRequest, a, b);
  }
}

/**
 * Request message for DeleteShelf method.
 *
 * @generated from message bookstore.DeleteShelfRequest
 */
export class DeleteShelfRequest extends Message<DeleteShelfRequest> {
  /**
   * The ID of the shelf to delete.
   *
   * @generated from field: int64 shelf = 1;
   */
  shelf = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteShelfRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.DeleteShelfRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelf", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteShelfRequest {
    return new DeleteShelfRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteShelfRequest {
    return new DeleteShelfRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteShelfRequest {
    return new DeleteShelfRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteShelfRequest | PlainMessage<DeleteShelfRequest> | undefined, b: DeleteShelfRequest | PlainMessage<DeleteShelfRequest> | undefined): boolean {
    return proto3.util.equals(DeleteShelfRequest, a, b);
  }
}

/**
 * Request message for ListBooks method.
 *
 * @generated from message bookstore.ListBooksRequest
 */
export class ListBooksRequest extends Message<ListBooksRequest> {
  /**
   * ID of the shelf which books to list.
   *
   * @generated from field: int64 shelf = 1;
   */
  shelf = protoInt64.zero;

  constructor(data?: PartialMessage<ListBooksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.ListBooksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelf", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBooksRequest {
    return new ListBooksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBooksRequest {
    return new ListBooksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBooksRequest {
    return new ListBooksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBooksRequest | PlainMessage<ListBooksRequest> | undefined, b: ListBooksRequest | PlainMessage<ListBooksRequest> | undefined): boolean {
    return proto3.util.equals(ListBooksRequest, a, b);
  }
}

/**
 * Request message for CreateBook method.
 *
 * @generated from message bookstore.CreateBookRequest
 */
export class CreateBookRequest extends Message<CreateBookRequest> {
  /**
   * The ID of the shelf on which to create a book.
   *
   * @generated from field: int64 shelf = 1;
   */
  shelf = protoInt64.zero;

  /**
   * A book resource to create on the shelf.
   *
   * @generated from field: bookstore.Book book = 2;
   */
  book?: Book;

  constructor(data?: PartialMessage<CreateBookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.CreateBookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelf", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "book", kind: "message", T: Book },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBookRequest {
    return new CreateBookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBookRequest {
    return new CreateBookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBookRequest {
    return new CreateBookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBookRequest | PlainMessage<CreateBookRequest> | undefined, b: CreateBookRequest | PlainMessage<CreateBookRequest> | undefined): boolean {
    return proto3.util.equals(CreateBookRequest, a, b);
  }
}

/**
 * Request message for GetBook method.
 *
 * @generated from message bookstore.GetBookRequest
 */
export class GetBookRequest extends Message<GetBookRequest> {
  /**
   * The ID of the shelf from which to retrieve a book.
   *
   * @generated from field: int64 shelf = 1;
   */
  shelf = protoInt64.zero;

  /**
   * The ID of the book to retrieve.
   *
   * @generated from field: int64 book = 2;
   */
  book = protoInt64.zero;

  constructor(data?: PartialMessage<GetBookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.GetBookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelf", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "book", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookRequest {
    return new GetBookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookRequest {
    return new GetBookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookRequest {
    return new GetBookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBookRequest | PlainMessage<GetBookRequest> | undefined, b: GetBookRequest | PlainMessage<GetBookRequest> | undefined): boolean {
    return proto3.util.equals(GetBookRequest, a, b);
  }
}

/**
 * Request message for UpdateBook method
 *
 * @generated from message bookstore.UpdateBookRequest
 */
export class UpdateBookRequest extends Message<UpdateBookRequest> {
  /**
   * The ID of the shelf from which to retrieve a book.
   *
   * @generated from field: int64 shelf = 1;
   */
  shelf = protoInt64.zero;

  /**
   * A book resource to update on the shelf.
   *
   * @generated from field: bookstore.Book book = 2;
   */
  book?: Book;

  constructor(data?: PartialMessage<UpdateBookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.UpdateBookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelf", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "book", kind: "message", T: Book },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBookRequest {
    return new UpdateBookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBookRequest {
    return new UpdateBookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBookRequest {
    return new UpdateBookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBookRequest | PlainMessage<UpdateBookRequest> | undefined, b: UpdateBookRequest | PlainMessage<UpdateBookRequest> | undefined): boolean {
    return proto3.util.equals(UpdateBookRequest, a, b);
  }
}

/**
 * Request message for DeleteBook method.
 *
 * @generated from message bookstore.DeleteBookRequest
 */
export class DeleteBookRequest extends Message<DeleteBookRequest> {
  /**
   * The ID of the shelf from which to delete a book.
   *
   * @generated from field: int64 shelf = 1;
   */
  shelf = protoInt64.zero;

  /**
   * The ID of the book to delete.
   *
   * @generated from field: int64 book = 2;
   */
  book = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteBookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.DeleteBookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shelf", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "book", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBookRequest {
    return new DeleteBookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBookRequest {
    return new DeleteBookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBookRequest {
    return new DeleteBookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBookRequest | PlainMessage<DeleteBookRequest> | undefined, b: DeleteBookRequest | PlainMessage<DeleteBookRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBookRequest, a, b);
  }
}

/**
 * Request message for GetAuthor method.
 *
 * @generated from message bookstore.GetAuthorRequest
 */
export class GetAuthorRequest extends Message<GetAuthorRequest> {
  /**
   * The ID of the author resource to retrieve.
   *
   * @generated from field: int64 author = 1;
   */
  author = protoInt64.zero;

  constructor(data?: PartialMessage<GetAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.GetAuthorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthorRequest {
    return new GetAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthorRequest {
    return new GetAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthorRequest {
    return new GetAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthorRequest | PlainMessage<GetAuthorRequest> | undefined, b: GetAuthorRequest | PlainMessage<GetAuthorRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthorRequest, a, b);
  }
}

/**
 * @generated from message bookstore.EchoBodyRequest
 */
export class EchoBodyRequest extends Message<EchoBodyRequest> {
  /**
   * @generated from field: string arg = 1;
   */
  arg = "";

  /**
   * @generated from field: string unused = 2;
   */
  unused = "";

  /**
   * @generated from field: bookstore.EchoBodyRequest.Nested nested = 3;
   */
  nested?: EchoBodyRequest_Nested;

  constructor(data?: PartialMessage<EchoBodyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.EchoBodyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "arg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "unused", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nested", kind: "message", T: EchoBodyRequest_Nested },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EchoBodyRequest {
    return new EchoBodyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EchoBodyRequest {
    return new EchoBodyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EchoBodyRequest {
    return new EchoBodyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EchoBodyRequest | PlainMessage<EchoBodyRequest> | undefined, b: EchoBodyRequest | PlainMessage<EchoBodyRequest> | undefined): boolean {
    return proto3.util.equals(EchoBodyRequest, a, b);
  }
}

/**
 * @generated from message bookstore.EchoBodyRequest.Nested
 */
export class EchoBodyRequest_Nested extends Message<EchoBodyRequest_Nested> {
  /**
   * @generated from field: google.api.HttpBody content = 1;
   */
  content?: HttpBody;

  constructor(data?: PartialMessage<EchoBodyRequest_Nested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.EchoBodyRequest.Nested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: HttpBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EchoBodyRequest_Nested {
    return new EchoBodyRequest_Nested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EchoBodyRequest_Nested {
    return new EchoBodyRequest_Nested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EchoBodyRequest_Nested {
    return new EchoBodyRequest_Nested().fromJsonString(jsonString, options);
  }

  static equals(a: EchoBodyRequest_Nested | PlainMessage<EchoBodyRequest_Nested> | undefined, b: EchoBodyRequest_Nested | PlainMessage<EchoBodyRequest_Nested> | undefined): boolean {
    return proto3.util.equals(EchoBodyRequest_Nested, a, b);
  }
}

/**
 * @generated from message bookstore.EchoNestedRequest
 */
export class EchoNestedRequest extends Message<EchoNestedRequest> {
  /**
   * @generated from field: bookstore.EchoNestedRequest.Nested nested1 = 1;
   */
  nested1?: EchoNestedRequest_Nested;

  /**
   * @generated from field: bookstore.EchoNestedRequest.Nested nested2 = 2;
   */
  nested2?: EchoNestedRequest_Nested;

  constructor(data?: PartialMessage<EchoNestedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.EchoNestedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nested1", kind: "message", T: EchoNestedRequest_Nested },
    { no: 2, name: "nested2", kind: "message", T: EchoNestedRequest_Nested },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EchoNestedRequest {
    return new EchoNestedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EchoNestedRequest {
    return new EchoNestedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EchoNestedRequest {
    return new EchoNestedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EchoNestedRequest | PlainMessage<EchoNestedRequest> | undefined, b: EchoNestedRequest | PlainMessage<EchoNestedRequest> | undefined): boolean {
    return proto3.util.equals(EchoNestedRequest, a, b);
  }
}

/**
 * @generated from message bookstore.EchoNestedRequest.Nested
 */
export class EchoNestedRequest_Nested extends Message<EchoNestedRequest_Nested> {
  /**
   * @generated from field: google.api.HttpBody body = 1;
   */
  body?: HttpBody;

  constructor(data?: PartialMessage<EchoNestedRequest_Nested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.EchoNestedRequest.Nested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "message", T: HttpBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EchoNestedRequest_Nested {
    return new EchoNestedRequest_Nested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EchoNestedRequest_Nested {
    return new EchoNestedRequest_Nested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EchoNestedRequest_Nested {
    return new EchoNestedRequest_Nested().fromJsonString(jsonString, options);
  }

  static equals(a: EchoNestedRequest_Nested | PlainMessage<EchoNestedRequest_Nested> | undefined, b: EchoNestedRequest_Nested | PlainMessage<EchoNestedRequest_Nested> | undefined): boolean {
    return proto3.util.equals(EchoNestedRequest_Nested, a, b);
  }
}

/**
 * Request and Response message for EchoStructReqResp method.
 *
 * @generated from message bookstore.EchoStructReqResp
 */
export class EchoStructReqResp extends Message<EchoStructReqResp> {
  /**
   * The content of request.
   *
   * @generated from field: google.protobuf.Struct content = 1;
   */
  content?: Struct;

  constructor(data?: PartialMessage<EchoStructReqResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.EchoStructReqResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EchoStructReqResp {
    return new EchoStructReqResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EchoStructReqResp {
    return new EchoStructReqResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EchoStructReqResp {
    return new EchoStructReqResp().fromJsonString(jsonString, options);
  }

  static equals(a: EchoStructReqResp | PlainMessage<EchoStructReqResp> | undefined, b: EchoStructReqResp | PlainMessage<EchoStructReqResp> | undefined): boolean {
    return proto3.util.equals(EchoStructReqResp, a, b);
  }
}

/**
 * Test message for deeply-nested HttpBody field.
 *
 * @generated from message bookstore.DeepNestedBody
 */
export class DeepNestedBody extends Message<DeepNestedBody> {
  /**
   * @generated from field: bookstore.DeepNestedBody.Nested nested = 1;
   */
  nested?: DeepNestedBody_Nested;

  /**
   * @generated from field: bookstore.DeepNestedBody.Extra extra = 2;
   */
  extra?: DeepNestedBody_Extra;

  constructor(data?: PartialMessage<DeepNestedBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.DeepNestedBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nested", kind: "message", T: DeepNestedBody_Nested },
    { no: 2, name: "extra", kind: "message", T: DeepNestedBody_Extra },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepNestedBody {
    return new DeepNestedBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepNestedBody {
    return new DeepNestedBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepNestedBody {
    return new DeepNestedBody().fromJsonString(jsonString, options);
  }

  static equals(a: DeepNestedBody | PlainMessage<DeepNestedBody> | undefined, b: DeepNestedBody | PlainMessage<DeepNestedBody> | undefined): boolean {
    return proto3.util.equals(DeepNestedBody, a, b);
  }
}

/**
 * @generated from message bookstore.DeepNestedBody.Nested
 */
export class DeepNestedBody_Nested extends Message<DeepNestedBody_Nested> {
  /**
   * @generated from field: bookstore.DeepNestedBody.Nested.Nested nested = 1000000;
   */
  nested?: DeepNestedBody_Nested_Nested;

  /**
   * @generated from field: bookstore.DeepNestedBody.Nested.Extra extra = 50;
   */
  extra?: DeepNestedBody_Nested_Extra;

  constructor(data?: PartialMessage<DeepNestedBody_Nested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.DeepNestedBody.Nested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1000000, name: "nested", kind: "message", T: DeepNestedBody_Nested_Nested },
    { no: 50, name: "extra", kind: "message", T: DeepNestedBody_Nested_Extra },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepNestedBody_Nested {
    return new DeepNestedBody_Nested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepNestedBody_Nested {
    return new DeepNestedBody_Nested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepNestedBody_Nested {
    return new DeepNestedBody_Nested().fromJsonString(jsonString, options);
  }

  static equals(a: DeepNestedBody_Nested | PlainMessage<DeepNestedBody_Nested> | undefined, b: DeepNestedBody_Nested | PlainMessage<DeepNestedBody_Nested> | undefined): boolean {
    return proto3.util.equals(DeepNestedBody_Nested, a, b);
  }
}

/**
 * @generated from message bookstore.DeepNestedBody.Nested.Nested
 */
export class DeepNestedBody_Nested_Nested extends Message<DeepNestedBody_Nested_Nested> {
  /**
   * @generated from field: bookstore.DeepNestedBody.Nested.Nested.Nested nested = 100000000;
   */
  nested?: DeepNestedBody_Nested_Nested_Nested;

  constructor(data?: PartialMessage<DeepNestedBody_Nested_Nested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.DeepNestedBody.Nested.Nested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100000000, name: "nested", kind: "message", T: DeepNestedBody_Nested_Nested_Nested },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepNestedBody_Nested_Nested {
    return new DeepNestedBody_Nested_Nested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepNestedBody_Nested_Nested {
    return new DeepNestedBody_Nested_Nested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepNestedBody_Nested_Nested {
    return new DeepNestedBody_Nested_Nested().fromJsonString(jsonString, options);
  }

  static equals(a: DeepNestedBody_Nested_Nested | PlainMessage<DeepNestedBody_Nested_Nested> | undefined, b: DeepNestedBody_Nested_Nested | PlainMessage<DeepNestedBody_Nested_Nested> | undefined): boolean {
    return proto3.util.equals(DeepNestedBody_Nested_Nested, a, b);
  }
}

/**
 * @generated from message bookstore.DeepNestedBody.Nested.Nested.Nested
 */
export class DeepNestedBody_Nested_Nested_Nested extends Message<DeepNestedBody_Nested_Nested_Nested> {
  /**
   * @generated from field: google.api.HttpBody body = 500000000;
   */
  body?: HttpBody;

  constructor(data?: PartialMessage<DeepNestedBody_Nested_Nested_Nested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.DeepNestedBody.Nested.Nested.Nested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 500000000, name: "body", kind: "message", T: HttpBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepNestedBody_Nested_Nested_Nested {
    return new DeepNestedBody_Nested_Nested_Nested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepNestedBody_Nested_Nested_Nested {
    return new DeepNestedBody_Nested_Nested_Nested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepNestedBody_Nested_Nested_Nested {
    return new DeepNestedBody_Nested_Nested_Nested().fromJsonString(jsonString, options);
  }

  static equals(a: DeepNestedBody_Nested_Nested_Nested | PlainMessage<DeepNestedBody_Nested_Nested_Nested> | undefined, b: DeepNestedBody_Nested_Nested_Nested | PlainMessage<DeepNestedBody_Nested_Nested_Nested> | undefined): boolean {
    return proto3.util.equals(DeepNestedBody_Nested_Nested_Nested, a, b);
  }
}

/**
 * @generated from message bookstore.DeepNestedBody.Nested.Extra
 */
export class DeepNestedBody_Nested_Extra extends Message<DeepNestedBody_Nested_Extra> {
  /**
   * @generated from field: int32 field = 1;
   */
  field = 0;

  constructor(data?: PartialMessage<DeepNestedBody_Nested_Extra>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.DeepNestedBody.Nested.Extra";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepNestedBody_Nested_Extra {
    return new DeepNestedBody_Nested_Extra().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepNestedBody_Nested_Extra {
    return new DeepNestedBody_Nested_Extra().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepNestedBody_Nested_Extra {
    return new DeepNestedBody_Nested_Extra().fromJsonString(jsonString, options);
  }

  static equals(a: DeepNestedBody_Nested_Extra | PlainMessage<DeepNestedBody_Nested_Extra> | undefined, b: DeepNestedBody_Nested_Extra | PlainMessage<DeepNestedBody_Nested_Extra> | undefined): boolean {
    return proto3.util.equals(DeepNestedBody_Nested_Extra, a, b);
  }
}

/**
 * @generated from message bookstore.DeepNestedBody.Extra
 */
export class DeepNestedBody_Extra extends Message<DeepNestedBody_Extra> {
  /**
   * @generated from field: string field = 1;
   */
  field = "";

  constructor(data?: PartialMessage<DeepNestedBody_Extra>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.DeepNestedBody.Extra";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepNestedBody_Extra {
    return new DeepNestedBody_Extra().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepNestedBody_Extra {
    return new DeepNestedBody_Extra().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepNestedBody_Extra {
    return new DeepNestedBody_Extra().fromJsonString(jsonString, options);
  }

  static equals(a: DeepNestedBody_Extra | PlainMessage<DeepNestedBody_Extra> | undefined, b: DeepNestedBody_Extra | PlainMessage<DeepNestedBody_Extra> | undefined): boolean {
    return proto3.util.equals(DeepNestedBody_Extra, a, b);
  }
}

/**
 * gRPC server is using BigBook, but envoy transcoder filter is using
 * OldBigBook with missing `field1`.
 *
 * @generated from message bookstore.BigBook
 */
export class BigBook extends Message<BigBook> {
  /**
   * @generated from field: string field1 = 1;
   */
  field1 = "";

  /**
   * @generated from field: string field2 = 2;
   */
  field2 = "";

  /**
   * @generated from field: string field3 = 3;
   */
  field3 = "";

  constructor(data?: PartialMessage<BigBook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.BigBook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "field3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigBook {
    return new BigBook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigBook {
    return new BigBook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigBook {
    return new BigBook().fromJsonString(jsonString, options);
  }

  static equals(a: BigBook | PlainMessage<BigBook> | undefined, b: BigBook | PlainMessage<BigBook> | undefined): boolean {
    return proto3.util.equals(BigBook, a, b);
  }
}

/**
 * The BigBook message with missing `field1`.
 *
 * @generated from message bookstore.OldBigBook
 */
export class OldBigBook extends Message<OldBigBook> {
  /**
   * @generated from field: string field2 = 2;
   */
  field2 = "";

  /**
   * @generated from field: string field3 = 3;
   */
  field3 = "";

  constructor(data?: PartialMessage<OldBigBook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bookstore.OldBigBook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "field2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "field3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OldBigBook {
    return new OldBigBook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OldBigBook {
    return new OldBigBook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OldBigBook {
    return new OldBigBook().fromJsonString(jsonString, options);
  }

  static equals(a: OldBigBook | PlainMessage<OldBigBook> | undefined, b: OldBigBook | PlainMessage<OldBigBook> | undefined): boolean {
    return proto3.util.equals(OldBigBook, a, b);
  }
}

